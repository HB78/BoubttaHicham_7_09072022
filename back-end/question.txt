le user doit pouvoir créer un compte
il doit pouvoir se connecter à un son compte avec un login et un mdp
il doit pouvoir se deconnecter
la session doit pouvoir se maintenir si il ne s'est pas deconnecté

le user doit etre capable de modifier son mot de passe et les infos de son profil (email, mdp, photo, description)

dans la main page le user doit pouvoir :
.créer des posts avec un titre et une image si il le souhaite
.commenter des posts
.liker ou disliker des posts
.recevoir des notifications
.rechercher un utilisateur dans une barre de recherche

************************************** commandes ************************************
Uniforme sur : 
	- la langue (pas mélanger Fr et EN)
	- Comment tu appelle tes variables (pas "texte" d'un coté et "contenu" de l'autre par exemple)
	- la forme de tes attribits (respecter la meme syntaxe : id_user ou idUser (soit tirets soit CamelCase))

CREATE TABLE users (
    id INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(100) NOT NULL UNIQUE,
    password VARCHAR(100)NOT NULL,
    name VARCHAR(100),
    poste VARCHAR(100),
    description VARCHAR(300),
    image_profil varchar(500)
);

CREATE TABLE publication (
    id INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(100),
    contenu VARCHAR(400) NOT NULL,
    image_path varchar(500),
    date_publi DATETIME,
    id_user INTEGER,
    FOREIGN KEY (id_user) references users(id)
);

CREATE TABLE commentaire (
    id INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,
    contenu VARCHAR(400) NOT NULL,
    date_comment DATETIME,
    id_user INTEGER,
    id_publi INTEGER,
    FOREIGN KEY (id_user) references users(id),
    FOREIGN KEY (id_publi) references publication(id)
);

CREATE TABLE reaction (
    date_reaction DATETIME,
    love INTEGER,
    id_publi INTEGER,
    FOREIGN KEY (id_publi) references publication(id),
    id_user INTEGER,
    FOREIGN KEY (id_user) references users(id),
    PRIMARY KEY (id_publi, id_user)
);
    PRIMARY KEY (id_publi, id_user, date_reaction)

**a analyser
etape 1 
SELECT * FROM publication p, users u WHERE p.id_user = u.id;

etape 2
SELECT p.title, p.contenu, p.image_path, p.id, u.name, u.image_profil FROM publication p, users u WHERE p.id_user = u.id;

etape 3 
SELECT p.title, p.contenu, p.image_path, p.id, u.name, u.image_profil FROM publication p, users u, reaction r WHERE p.id_user = u.id;

créer trois tables pour gérer les autorisations:
-> le groupe d'utilisateur : un ensemble de personnes (le nom du groupe d'utilisateur (varchar) + une clef primaire)
-> les droits d'accès: clef primaire, clef etrangère pour acceder aux autres tables
-> 

/* JIM */

SELECT W.client_id client_id,validation,password,username,client_code FROM dg_web_comptes W, dg_clients C WHERE W.client_id=C.client_id AND username='" + req.body.email + "'";


JOINTURE entre les tables pour "croiser" les données des différentes tables
SELECT * FROM reaction join users on users.id = reaction.id_user join publication on reaction.id_publi = publication.id;


requete pourt .....
select .....

/* COMMANDE A ETUDIER */

--> NORMALEMENT POUR AFFICHER LA PUBLICATION D'UN USER ET SON CONTENU
SELECT contenu, date_publi, name FROM reaction join users on users.id = reaction.id_user join publication on reaction.id_publi = publication.id where users.id=2;

AJOUT D'UN LIKE OU D'UN DISLIKE
INSERT INTO `reaction`(`id`, `date_reaction`, `love`, `id_publi`, `id_user`) VALUES (1,'2022-01-01',1, 1, 1), (2,'2022-01-02',-1, 1, 2), (3,'2022-01-02',1, 2, 2);

SELECT * FROM `reaction` WHERE 1;
SELECT * FROM reaction join users;
SELECT * FROM reaction join users on reaction.id_user = users.id WHERE 1;
SELECT * FROM reaction join users on users.id = reaction.id_user join publication on reaction.id_publi = publication.id;
SELECT * FROM `commentaire` WHERE 1;
SELECT * FROM `commentaire` WHERE 1;
select * from reaction where reaction.id_publi=1;

select count(id) from reaction where reaction.id_publi=1;

SELECT * FROM reaction join users on users.id = reaction.id_user join publication on reaction.id_publi = publication.id;

SELECT contenu FROM reaction join users on users.id = reaction.id_user join publication on reaction.id_publi = publication.id where users.id=2;

** MES RECHERCHES **

pour afficher tous le contenu d'une publication ??
ce qui est bien c'est que cela selectionne meme les publi sans titre
il faut faire les choses en 2 partie dans le code je crois
--> selectionner toutes les infos d'une publi
--> compter les likes
--> mais comment enchevetrer les deux logiques ?
SELECT contenu, date_publi, name, reaction.love, title FROM publication join users on users.id = publication.id_user JOIN reaction on reaction.id_user = publication.id_user;


