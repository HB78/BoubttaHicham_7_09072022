le user doit pouvoir créer un compte
il doit pouvoir se connecter à un son compte avec un login et un mdp
il doit pouvoir se deconnecter
la session doit pouvoir se maintenir si il ne s'est pas deconnecté

le user doit etre capable de modifier son mot de passe et les infos de son profil (email, mdp, photo, description)

dans la main page le user doit pouvoir :
.créer des posts avec un titre et une image si il le souhaite
.commenter des posts
.liker ou disliker des posts
.recevoir des notifications
.rechercher un utilisateur dans une barre de recherche

************************************** commandes ************************************
Uniforme sur : 
	- la langue (pas mélanger Fr et EN)
	- Comment tu appelle tes variables (pas "texte" d'un coté et "contenu" de l'autre par exemple)
	- la forme de tes attribits (respecter la meme syntaxe : id_user ou idUser (soit tirets soit CamelCase))

CREATE TABLE users (
    id INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(100) NOT NULL UNIQUE,
    password VARCHAR(100)NOT NULL,
    name VARCHAR(100),
    poste VARCHAR(100),
    description VARCHAR(300),
    image_profil varchar(500)
);

CREATE TABLE publication (
    id INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(100),
    contenu VARCHAR(400) NOT NULL,
    image_path varchar(500),
    date_publi DATETIME,
    id_user INTEGER,
    FOREIGN KEY (id_user) references users(id)
);

CREATE TABLE commentaire (
    id INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,
    contenu VARCHAR(400) NOT NULL,
    date_comment DATETIME,
    id_user INTEGER,
    id_publi INTEGER,
    FOREIGN KEY (id_user) references users(id),
    FOREIGN KEY (id_publi) references publication(id)
);

CREATE TABLE reaction (
    date_reaction DATETIME,
    love INTEGER,
    id_publi INTEGER,
    FOREIGN KEY (id_publi) references publication(id),
    id_user INTEGER,
    FOREIGN KEY (id_user) references users(id),
    PRIMARY KEY (id_publi, id_user)
);

CREATE TABLE notifications(
    id INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,
    contenu VARCHAR ETC
    date_reaction DATETIME,
    id_user INTEGER,
    FOREIGN KEY (id_user) references users(id),
    id_publi INTEGER,
    FOREIGN KEY (id_publi) references publication(id),
    id_comment INTEGER,
    FOREIGN KEY (id_comment) references commentaire(id),
    id_reaction,
    FOREIGN KEY (id_reaction) references reaction(PRIMARY KEY)
);
    PRIMARY KEY (id_publi, id_user, date_reaction)

notification : 
    - id : integer
    - contenu : texte
    - id user (qui est notifié)
    - ouverte : boolean

    (
    - id_likeur FOREIGN key (NULLABLE)
    - id_publi  FOREIGN key (NULLABLE)
    - id_commentaire  FOREIGN key (NULLABLE)
    )
select id_user, count(id) from notification where overte = false group by id_user and id_user = ....


**a analyser
etape 1 
SELECT * FROM publication p, users u WHERE p.id_user = u.id;

etape 2
SELECT p.title, p.contenu, p.image_path, p.id, u.name, u.image_profil FROM publication p, users u WHERE p.id_user = u.id;

etape 3 
SELECT p.title, p.contenu, p.image_path, p.id, u.name, u.image_profil FROM publication p, users u, reaction r WHERE p.id_user = u.id;

créer trois tables pour gérer les autorisations:
-> le groupe d'utilisateur : un ensemble de personnes (le nom du groupe d'utilisateur (varchar) + une clef primaire)
-> les droits d'accès: clef primaire, clef etrangère pour acceder aux autres tables
-> 

/* JI */

SELECT W.client_id client_id,validation,password,username,client_code FROM dg_web_comptes W, dg_clients C WHERE W.client_id=C.client_id AND username='" + req.body.email + "'";


JOINTURE entre les tables pour "croiser" les données des différentes tables
SELECT * FROM reaction join users on users.id = reaction.id_user join publication on reaction.id_publi = publication.id;


requete pourt .....
select .....

/* COMMANDE A ETUDIER */

--> NORMALEMENT POUR AFFICHER LA PUBLICATION D'UN USER ET SON CONTENU
SELECT contenu, date_publi, name FROM reaction join users on users.id = reaction.id_user join publication on reaction.id_publi = publication.id where users.id=2;

AJOUT D'UN LIKE OU D'UN DISLIKE
INSERT INTO `reaction`(`id`, `date_reaction`, `love`, `id_publi`, `id_user`) VALUES (1,'2022-01-01',1, 1, 1), (2,'2022-01-02',-1, 1, 2), (3,'2022-01-02',1, 2, 2);

SELECT * FROM `reaction` WHERE 1;
SELECT * FROM reaction join users;
SELECT * FROM reaction join users on reaction.id_user = users.id WHERE 1;
SELECT * FROM reaction join users on users.id = reaction.id_user join publication on reaction.id_publi = publication.id;
SELECT * FROM `commentaire` WHERE 1;
SELECT * FROM `commentaire` WHERE 1;
select * from reaction where reaction.id_publi=1;

select count(id) from reaction where reaction.id_publi=1;

SELECT * FROM reaction join users on users.id = reaction.id_user join publication on reaction.id_publi = publication.id;

SELECT contenu FROM reaction join users on users.id = reaction.id_user join publication on reaction.id_publi = publication.id where users.id=2;

** MES RECHERCHES **

pour afficher tous le contenu d'une publication ??
ce qui est bien c'est que cela selectionne meme les publi sans titre
il faut faire les choses en 2 partie dans le code je crois
--> selectionner toutes les infos d'une publi
--> compter les likes
--> mais comment enchevetrer les deux logiques ?
SELECT contenu, date_publi, name, reaction.love, title FROM publication join users on users.id = publication.id_user JOIN reaction on reaction.id_user = publication.id_user;


******************************************** LA SOLUTION ***********************************
--> RECUPERATION DES PUBLICATIONS AVEC LES LIKES ET LES NOMS DE LA BDD

SELECT DISTINCT publication.id, publication.title, publication.date_publi, users.name AS userName, 
	(
        select count(*) 
        from reaction 
        WHERE reaction.love = 1 
        and reaction.id_publi = publication.id
    ) as alike,
    (
        select count(*) 
        from reaction 
        WHERE reaction.love = -1
        and reaction.id_publi = publication.id
    ) as dislike
from publication
left join reaction on reaction.id_publi = publication.id
left join users on reaction.id_publi = users.id;

--> RECUPERATION DES PUBLICATIONS AVEC LES LIKES ET LES NOMS DE LA BDD D'UN SEUL USER

SELECT publication.id, publication.title, publication.date_publi, users.name AS userName, COUNT(likeTable.love) AS liked, COUNT(dislikeTable.love) AS disliked
FROM publication
LEFT JOIN reaction AS likeTable ON likeTable.id_publi=publication.id AND likeTable.love=1
LEFT JOIN reaction AS dislikeTable ON dislikeTable.id_publi=publication.id AND dislikeTable.love=0
INNER JOIN users ON users.id=publication.id_user
WHERE users.id = req.params.id
GROUP BY publication.id
ORDER BY publication.date_publi DESC;

--> RECUPERATION DES NOMS ET DES COMMENTAIRES DES PUBLICATIONS

SELECT commentaire.id, commentaire.id_user, commentaire.id_publi, commentaire.contenu, users.name 
FROM commentaire
JOIN publication ON commentaire.id_publi = publication.id
JOIN users ON users.id = commentaire.id_user
GROUP BY commentaire.id
ORDER BY commentaire.date_comment DESC;

--> EFFACER UNE PUBLICATION 

DELETE FROM publication WHERE publication.id = 14;

--> CREATION D'UNE PUBLICATION

INSERT INTO `publication` (`title`, `contenu`, `image_path`, `date_publi`, `id_user`) VALUES ('TEST CREATION DE POST', 'TEST CREATION POST', NULL, '2022-07-07', '8');

--> MISE A JOUR D'UNE PUBLICATION SANS PHOTO

UPDATE `publication` SET `title` = 'TEST CREATION DE POST 2', `contenu` = 'TEST CREATION POST 2' WHERE `publication`.`id` = 15;


--> MISE A JOUR D'UNE PUBLICATION AVEC PHOTO

`UPDATE publication SET image_path = '${req.protocol}://${req.get('host')}/images/${req.file.filename}',
title ='${req.params.title}', contenu = '${req.params.contenu}', date_publi = '${req.params.date_publi}'  WHERE id = '${req.params.id}';`;

************ SOLUTION COMMENTAIRE ******

--> CREER UN COMMENTAIRE

INSERT INTO `commentaire` (`contenu`, `date_comment`, `id_user`, `id_publi`) VALUES ('Je suis d\'accord avec toi', '2022-02-02', '6', '5');

--> EFFACER UN COMMENTAIRE

DELETE FROM `commentaire` WHERE `commentaire`.`id` = 8

--> MISE A JOUR D'UN COMMENTAIRE

UPDATE `commentaire` SET `contenu` = 'bruce lee est le meilleur au kung fu' WHERE `commentaire`.`id` = 3;

--> DOIT ON AFFICHER LES COMMENTAIRE QUAND ON L'A FAIT DANS LA PARTIE PUBLICATION ?

SELECT commentaire.id, commentaire.contenu, commentaire.date_comment,commentaire.date_comment, publication.id, users.name
FROM commentaire
INNER JOIN publication ON commentaire.id_user=publication.id_user
INNER JOIN users ON users.id = commentaire.id_user
GROUP BY commentaire.id
ORDER BY commentaire.date_comment DESC;

********* LIKE DISLIKE SOLUTION *****************

--> AJOUT D'UN LIKE ET DISLIKE

INSERT INTO `reaction` (`love`, `id_publi`, `id_user`) VALUES ('1', '4', '7');

--> ENLEVER UN LIKE 

******* question *******
--> peut on récupérer les likes, commentaire, publication et le name du users dans une seule commande ?ok
--> je n'arrive pas a recuperer le like et le disliked ok
--> comment mettre en place la table notification ?

----> pour mettre en place la pagination (pagination décalé et asynchrone)
select * from publication limit 3 OFFSET 3;


--------> SESSION CORRECTION DU BACK-END <---------------

+++> comment recuperer l'id de la publication dans le commentController ?/

+++> correction des updates dans le fichier userController(on doit faire un ou plusieurs update ?)

+++> correction du controller reaction

+++> correctif de Multer qui ne marche pas

+++> comment mettre en place un compte administrateur ?

+++> doit on iterer dans la fonction qui recupere toutes les publications d'un users dans userController ?
(derniere question concernant le back-end)

+++> intro React (connexion à la BDD, props, usestate, useEffect, formulaire)